/*
Дан текстовый файл, в первой строке которого хранится число N, а во второй
строке N целых чисел. Необходимо создать упорядоченный по убыванию список, в который
поместить все эти элементы, при этом очередной элемент вставлять в список так, чтобы не
нарушалась его упорядоченность.

Для каждой динамической структуры должен быть предусмотрен стандартный набор методов - 
добавления/удаления/вывода элементов. 
Во всех задачах обязательно наличие дружественного интерфейса. Ввод данных с клавиатуры.
*/

#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <iostream>
#include <fstream>
#include <string>

/**
 * @class Node
 * @brief Узел связного списка
 * 
 * Содержит данные и указатель на следующий узел
 */
class Node {
public:
    int data;       ///< Значение узла
    Node* next;     ///< Указатель на следующий узел

    /**
     * @brief Конструктор узла
     * @param value Значение для хранения в узле
     */
    Node(int value);
};

/**
 * @class LinkedList
 * @brief Класс упорядоченного по убыванию связного списка
 * 
 * Предоставляет операции для работы с упорядоченным списком
 */
class LinkedList {
private:
    Node* head;     ///< Указатель на начало списка

public:
    /**
     * @brief Конструктор списка
     */
    LinkedList();
    
    /**
     * @brief Деструктор списка
     * 
     * Освобождает память, занятую узлами списка
     */
    ~LinkedList();
    
    /**
     * @brief Вставка элемента с сохранением упорядоченности
     * @param value Значение для вставки
     */
    void InsertSorted(int value);
    
    /**
     * @brief Вывод элементов списка
     */
    void Print();
    
    /**
     * @brief Чтение данных из файла
     * @param filename Имя файла для чтения
     */
    void ReadFromFile(const std::string& filename);
    
    /**
     * @brief Дружественная функция для чтения из файла
     * @param list Список для заполнения
     * @param filename Имя файла для чтения
     */
    friend void ReadFromFile(LinkedList& list, const std::string& filename);
};

#endif // LINKED_LIST_H
